
//! Autogenerated weights for pallet_tipping
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-14
//! STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Irmans-MacBook-Pro.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// target/release/myriad
// benchmark
// pallet
// --chain=dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet=pallet-tipping
// --extrinsic=*
// --steps=50
// --repeat=20
// --heap-pages=4096
// --template=./.maintain/pallet-weight-template.hbs
// --output=./pallets/tipping/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_tipping.
pub trait WeightInfo {
	fn pay_content() -> Weight;
	fn withdraw_fee() -> Weight;
	fn withdraw_reward() -> Weight;
	fn send_tip() -> Weight;
	fn claim_reference() -> Weight;
	fn claim_tip() -> Weight;
}

/// Weights for pallet_tipping using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Tipping WithdrawalBalance (r:1 w:1)
	/// Proof Skipped: Tipping WithdrawalBalance (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tipping RewardBalance (r:1 w:1)
	/// Proof Skipped: Tipping RewardBalance (max_values: None, max_size: None, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	fn pay_content() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `84`
		//  Estimated: `14787`
		// Minimum execution time: 265_000 nanoseconds.
		Weight::from_parts(300_000_000, 14787)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: Tipping WithdrawalBalance (r:2 w:1)
	/// Proof Skipped: Tipping WithdrawalBalance (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:2 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn withdraw_fee() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `243`
		//  Estimated: `12379`
		// Minimum execution time: 79_000 nanoseconds.
		Weight::from_parts(83_000_000, 12379)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Tipping RewardBalance (r:2 w:1)
	/// Proof Skipped: Tipping RewardBalance (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn withdraw_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `499`
		//  Estimated: `12635`
		// Minimum execution time: 134_000 nanoseconds.
		Weight::from_parts(286_000_000, 12635)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Tipping TipsBalanceByReference (r:1 w:1)
	/// Proof Skipped: Tipping TipsBalanceByReference (max_values: None, max_size: None, mode: Measured)
	fn send_tip() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `42`
		//  Estimated: `7100`
		// Minimum execution time: 151_000 nanoseconds.
		Weight::from_parts(290_000_000, 7100)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: Tipping TipsBalanceByReference (r:2 w:2)
	/// Proof Skipped: Tipping TipsBalanceByReference (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn claim_reference() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `557`
		//  Estimated: `10090`
		// Minimum execution time: 171_000 nanoseconds.
		Weight::from_parts(284_000_000, 10090)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: Tipping TipsBalanceByReference (r:1 w:0)
	/// Proof Skipped: Tipping TipsBalanceByReference (max_values: None, max_size: None, mode: Measured)
	fn claim_tip() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `296`
		//  Estimated: `3761`
		// Minimum execution time: 64_000 nanoseconds.
		Weight::from_parts(64_000_000, 3761)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Tipping WithdrawalBalance (r:1 w:1)
	/// Proof Skipped: Tipping WithdrawalBalance (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tipping RewardBalance (r:1 w:1)
	/// Proof Skipped: Tipping RewardBalance (max_values: None, max_size: None, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	fn pay_content() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `84`
		//  Estimated: `14787`
		// Minimum execution time: 265_000 nanoseconds.
		Weight::from_parts(300_000_000, 14787)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: Tipping WithdrawalBalance (r:2 w:1)
	/// Proof Skipped: Tipping WithdrawalBalance (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:2 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn withdraw_fee() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `243`
		//  Estimated: `12379`
		// Minimum execution time: 79_000 nanoseconds.
		Weight::from_parts(83_000_000, 12379)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Tipping RewardBalance (r:2 w:1)
	/// Proof Skipped: Tipping RewardBalance (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn withdraw_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `499`
		//  Estimated: `12635`
		// Minimum execution time: 134_000 nanoseconds.
		Weight::from_parts(286_000_000, 12635)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Tipping TipsBalanceByReference (r:1 w:1)
	/// Proof Skipped: Tipping TipsBalanceByReference (max_values: None, max_size: None, mode: Measured)
	fn send_tip() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `42`
		//  Estimated: `7100`
		// Minimum execution time: 151_000 nanoseconds.
		Weight::from_parts(290_000_000, 7100)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: Tipping TipsBalanceByReference (r:2 w:2)
	/// Proof Skipped: Tipping TipsBalanceByReference (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn claim_reference() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `557`
		//  Estimated: `10090`
		// Minimum execution time: 171_000 nanoseconds.
		Weight::from_parts(284_000_000, 10090)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: Tipping TipsBalanceByReference (r:1 w:0)
	/// Proof Skipped: Tipping TipsBalanceByReference (max_values: None, max_size: None, mode: Measured)
	fn claim_tip() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `296`
		//  Estimated: `3761`
		// Minimum execution time: 64_000 nanoseconds.
		Weight::from_parts(64_000_000, 3761)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
}
